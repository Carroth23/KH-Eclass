-- 모든 컬럼을 보고싶을 때는 * (에스터리스크)
select * from employee;

-- 데이터 영역 문자열은 작은 따옴표
-- 헤더 영역 문자열은 큰 따옴표
-- ex) select emp_name as " 사원 이름 " from employee; -> 얘는 헤더 이름 지정해주는 거니까 ""

-- where : 조건을 달 때 사용
select * from employee where emp_id = 200; -- 사원 번호가 200인 직원 의 모든 정보 출력

-- 헤더 이름 바꾸고 싶을 때 
-- 여기서 as 생략 가능
-- 띄어쓰기 없는 문자열일 때는 " " 생략 가능
select emp_name as " 사원 이름 " from employee;
select emp_name as 이름 from employee; -- as, "" 생략(띄어쓰기 없으니까)

-- ||로 연결해서 쓸 수 있다. 
select salary*12||'원' 연봉 from employee; -- 이렇게 하면  salary데이터 영역에 원단위가 포함되어 출력

-- null 값 선별해서 보기 
-- null인 애들만 보기(is null)
select * from employee where bonus is null;
-- null이 아닌 애들만 보기(is not null)
select * from employee where bonus is not null;
-- 예를들어, 문제에서 부서배치가 안된 직원 정보 출력이라고 하면 null 여부를 판단하면 된다. 
select * from employee where dept_code is null; 

-- or 을 표현하는 다른 방법 --> in()
-- or 사용
select * from employee where emp_id = 200 or emp_id = 201;
-- in() 사용
select * from employee where emp_id in (200,201);

-- like 연산
-- 1. 좀 더 포괄적으로 데이터 검색할 떄 --> like + % 구조 이용
select * from employee where emp_name like '유%'; -- 유로 시작하는 사람(유 외자 포함)
select * from employee where emp_name like '%식'; -- 식으로 끝나는 사람(식 외자 포함)
select * from employee where emp_name like '%하%'; -- 하가 포함된 사람 
-- 2. 글자 수 지정해서 검색할 때 --> like + _ 구조 이용
-- _하나당 글자수 하나
select * from employee where emp_name like '유재_'; -- 유재땡 찾기
select * from employee where emp_name like '유__'; -- 유땡떙 찾기

-- 연산자 우선순위 -> and가 or 보다 먼저 계산됨
-- 우선순위를 일일이 외울 수 없으니, 괄호() 이용해서 순서 조정하면 됨
select * from employee where (job_code = 'J7' or job_Code = 'J2') and salary > 2000000;
-- 괄호가 없었다면  job_Code = 'J2 and salary > 2000000 얘부터 계산 되었을 것!

-- order by 문법 : 데이터 정렬에 사용(오름차순, 내림차순)
-- 구조 : order by    (1)정렬할 데이터의 헤더명(또는 열번호)    (2)오름차순or내림차순 명시
-- 오름차순 : 디폴트값-> (2) 자리에 아무것도 안적으면 자동으로 오름차순, asc, 1
-- 내림차순 : dsc, 2
select * from employee order by emp_name; -- 뒤에 명시 안하면 자동으로 오름차순
select * from employee order by emp_name asc; -- asc자리에 1적어도 됨
select * from employee order by emp_name desc; -- desc자리에 2적어도 됨
select * from employee order by 2; -- 2열 기준으로 오름차순 정렬 


