-- SubQuery : 하나의 SQL 문 안에 포함되어 있는 또다른 SQL문
-- main 쿼리 = 바깥쪽 쿼리
-- 서브쿼리는 조인이랑 일부 기능이 겹침
-- 서브 쿼리는 괄호 안에 작성
-- 결국 서브쿼리 실행후 최종 결과값을 전달
-- 위치는 자유(꼭 where 절일 필요 없음)


-- << 단일행 서브 쿼리 (or 단일열 서브쿼리) >> : 서브쿼리 결과값이 딱 하나임(한칸)
--  ex 1) 전지연의 매니저가 누구인지 출력
select emp_name from employee 
where emp_id = 
    (select manager_id from employee where emp_name = '전지연'); -- ()안의 실행 결과는 결국 214인거

--  ex 2) 전직원의 평균 급여보다 더많은 급여를 받는 직원의 정보 출력
select * from employee 
where salary > (select avg(salary) from employee );


-- << 다중행 서브 쿼리 >>  : 서브쿼리 결과값이 여러줄(row)을 만듬
-- in / not in / any / all 사용

-- ex1 _ in 사용) 송종기 또는 전지연 직원과 동일한 부서에서 일하는 사람들의 정보 출력
select * from employee
where dept_code in (select dept_code from employee where emp_name in ('송종기','전지연')); 

-- ex2 _ not in 사용) 송종기 또는 전지연 직원과 다른 부서에서 일하는 사람들의 정보 출력
select * from employee
    where dept_code not in (select dept_code from employee where emp_name in ('송종기','전지연'));    

-- ex3 _ any 사용) 직급코드가 J3인 사람들의 모든 급여중에 하나보다 큰 정보 출력
select * from employee
    where salary > any (select salary from employee where job_code = 'J3');
-- 또는 min 함수 이용
select * from employee
    where salary > (select min(salary) from employee where job_code = 'J3');

-- ex4_ all 사용) 송종기 또는 전지연 직원과 다른 부서에서 일하는 사람들의 정보 출력
-- J3직급을 가진 직원들의 모든 급여보다 크면 출력
select * from employee
    where salary > all (select salary from employee where job_code = 'J3');
-- 또는 max 함수 이용
select * from employee
    where salary >  (select max(salary) from employee where job_code = 'J3');

-- [ any/all + 대소관계 의미 정리 ]
-- any > ~중에 아무거나보다 크다 == min
-- any < ~중에 아무거나보다 작다 == max
-- all > ~전체보다 크다 == max
-- all < ~전체보다 작다 == min


-- << 다중열 서브 쿼리 >>
-- 다중열은 비교할 칼럼이 두개 이상이므로 괄호로 묶고, 안에 비교할 칼럼명 나열
-- ex ) 이태림과 같은 직급 + 같은 부서인 직원 정보 출력
select * from employee
    where (dept_code,job_code) = (select dept_code, job_code from employee where emp_name = '이태림') 
	and emp_name != '이태림';

-- << 다중행 + 다중열 서브 쿼리 >> 
-- = 연산 사용 불가(다중행 조건이 추가되었기 때문)
-- ex) 이태림, 대북혼과 같은 직급 + 같은 부서인 직원 정보 출력
select * from employee
    where (dept_code,job_code) in (select dept_code, job_code from employee where emp_name in ('이태림', '대북혼')) 
	and emp_name not in( '이태림', '대북혼');


------------ 서브 쿼리 심화 -------------------
-- << 상호연관 서브쿼리 >> : main 쿼리를 서브쿼리에 이용
-- 쿼리 실행 순서를 생각하면 쉽다!!
-- ex) 자신이 속한 직급 직원들의 평균 급여보다 더 많이 받는 직원 정보 출력
select * from employee e
	where salary >= (select avg(salary) from employee e2 where e2.job_code = e.job_code);

-- Join문 대신하기 
-- ex) dept_title 출력
select 
    (select dept_title from department where dept_id = e.dept_code) 
from employee e;


------------ 추가 
-- rank() over(기준) -> 동점자 처리 자동
select emp_name, salary, rank() over(order by salary desc)  from employee;

-- dense_rank() over -> 공동순위 제거
select emp_name, salary, dense_rank() over(order by salary desc) from employee;

-- row_number() over -> 행번호 출력
select emp_name, salary, row_number()over(order by salary desc)  from employee;

-- ex) 5위 ~ 10위만 출력
select  * from (select 
    emp_name, 
    salary, 
    rank() over(order by salary desc) as 랭킹 from employee)
where 랭킹 between 5 and 10; 



----------------- 서브쿼리 연습문제 어려웠던거 
--문제4
--각 직급마다 급여 등급이 가장 높은 직원의 이름, 직급코드, 급여, 급여등급을 조회하세요  
select emp_name 이름, job_code 직급코드, salary 급여, sal_level 급여등급 
from employee e
where 
	(job_code, sal_level) in
		 (select job_code, max(sal_level) from employee e2 where e2.job_code = e.job_code group by job_code)
order by 2;


--문제5
-- 부서별 평균 급여가 2200000 이상인 부서명, 평균 급여를 조회하세요. 
-- 단, 평균 급여는 소수점 버림
select *
from (select 
        (select dept_title from department where dept_id = e.dept_code) 부서명, 
                floor((select avg(salary) from employee e2 where e2.dept_code = e.dept_code group by dept_code)) 평균급여
    from employee e group by dept_code)
where 
평균급여 >= 2200000;
-- 또는
select 
	(select dept_title from department where dept_id = e.dept_code) 부서명, 
	floor(avg(salary)) 평균급여
from employee e group by dept_code having  2200000 <= floor(avg(salary));




--문제6
--직급의 연봉 평균보다 적게 받는 여자사원의
--사원명,직급코드,부서코드,연봉을 이름 오름차순으로 조회하세요.
--연봉 계산 => (급여+(급여*보너스))*12    
select emp_name 사원명, job_code 직급코드, nvl(dept_code, ' ') 부서코드, to_char((salary+(salary*nvl(bonus,0)))*12,'L999,999,999') 연봉 
from employee e
where substr(emp_no,8,1)=2 and 
    salary  < (select avg(salary) from employee e2 where e2.job_code = e.job_code)
order by 1;
